@keyframes move {
	0%, 10% {
		transform: translateX(-40vw);
	}
	90%, 100% {
		transform: translateX(40vw);
	}
}

div {
	animation-iteration-count: infinite;
}

div:nth-of-type(2) {
	animation-timing-function: ease;
}

div:nth-of-type(3) {
	animation-timing-function: ease-in;
}

div:nth-of-type(4) {
	animation-timing-function: ease-out;
}

div:nth-of-type(5) {
	animation-timing-function: ease-in-out;
}

div:nth-of-type(6) {
	animation-timing-function: linear;
}

div:nth-of-type(7) {
	animation-timing-function: cubic-bezier(0.15, .5, 1, 0);
}

div:nth-of-type(8) {
	animation-timing-function: steps(10);
}

.spinner {
	animation-name: spin;
	animation-duration: 2s;
	animation-timing-function: linear;
}

div {
	animation-iteration-count: 4;
	/* Animation fill mode will helps to retain animation state after the end */
	/* forwards mean that after the end, the state will be fixed while ending */
	/* backwards mean that before the start of the animation, beginning keyframe value will be applied for the delay period */
	/* i.e. Untill the time set in animation-delay expires, animation state will be from's or 0%'s value of respective keyframe */
	animation-fill-mode: forwards;
	/* animation-direction helps to decide the direction of the animation */
	/* i.e. if animation-iteration-count is 2 and if you want to reverese the direction after first
	animation done, then use alternate to reverse from there */
	animation-direction: alternate;
}

/* Shorthand notation */
span {
	animation-name: spin;
	animation-duration: .5s;
	animation-timing-function: ease-out;
	animation-delay: 1s;
	animation-iteration-count: infinite;
	animation-direction: normal;
	animation-fill-mode: none;
	animation-play-state: running;
}

/* Above is equivalent to this */
span {
	animation: spin .5s ease-out 1s infinite normal none running;
}