Chapter 3 - New Selectors:
1. Universal Selector (*):
    It applies to all elements at which it is targeted.
    It should be used as minimal as possible as it will cause drastic performance reduction.

2. Adjacent Sibling Selector (+):
    It applies to the element immediately one and only one.

3. Direct Child Selector (>):
    Direct child selector is not greedy. It only selects the immediate children below the root element.
	Children of children is not selected.

4. General Sibling Selector (~):
	Similar to "Adjacent Sibling Selector".
	It selects not just one element but all matching elements.

5. Attribute Selector:
	HTML elements will have some attributes and value for those attributes.
	This attribute or attribute + value can be used to select that particular element.
	Like input[type="button"], which selects all input tags wihch contains the attribute type and value as button.
	div[canmodify] can be used to select all divs which has canmodify attribute.
	We can also select elements which don't have the attribute. Eg. div:not([canmodify])
	Starts with:
	To select elements which has value starting with "text" for the type attribute, we can use ^= like div[type^="text"]
	The above will select all div elements with type attribute having the value text* linkee textbox, textarea and so on.
	Ends with:
	Like starts with, to select ends with some string, $= is used.
	Eg. div[imagetype$=".png"]
	Contains:
	Like starts with and ends with, to select elements which has attribute with value that contains some text.
	Eg. a[href*="users"]
	The above will select anchor elements with href attribute whose value contains users in it.

Chapter 4 - New Pseudo Selectors:
1. :focus
	When an element is in focus state, this psuedo selector will get come into effect.
	If used without regular selector, then it applies to whichever element has focused state and is currently focused.

2. :visited
	This psuedo selector has been there from CSS2.
	It is used to indicate visited links which is decided based on the browser history.
	THIS SELECTOR CAN BE USED TO GET BROWSER HISTORY.
	But in today's modern browsers, this is prevented. Even though the link is visited, it will be shown only in UI
	but when used getComputedStyle method to get the color, it will return only the initial color preventing browser history hacking.

3. :disabled
	This selector is used to style disabled form elements.
	To make an element disabled, just add attribute disabled without any value to it.

4. :enabled
	This selector is logical opposite of disabled selector and no need of any attribute to be added to the element.

5. :valid
	Today's modern browser supports browser side validation of inputs before submitting to the server.
	When the entered input for a field in the form is valid, this selector can be used to denote it.

6. :invalid
	When the entered input for a filed in the form is invalid or value is not entered for a required field,
	this selector can be used to denote it as error.

7. :checked
	This selector is applied for input elements with type "checkbox" or "radio".
	This is used to differentiate the values that are checked or selected from the rest of the options.

8. :before
	This selector unlike rest of the selectors, can be used to display content as well.
	This selector adds the content to the before of the contents in the element with specified stylings.

9. :after
	This is the opposite of :before selector.
	It adds the content after the contents of the element.

10. First-X, Last-X and nth-X:
	There are two groups.
	 i) first-child, last-child and nth-child():
	 	:first-child
			This applies to the first element. child denotes that element must have parent.
			In ul -> li, li elements will be the children of ul. But to select first li,
			li:first-child is used.
		:last-child
			This applies to the last element.
		:nth-child()
			Unlike the above two, nth-child accepts an argument or parameter.
			The parameter can be any valid algebric equation.
			Eg. li:nth-child(3n)
			This will select all elements which are in the mulitples of 3 position.
			i.e. 0, 3, 6, 9, 12, ...
			There is no 0th element like in array.
			So 0th child is not applied.
			However if you use (3n + 1), it will give 1, 4, 7, 10.
			So all these are valid and hence for all those elements, style will be applied.

			nth-child also accepts just a single number upon which selects only that element.
			Eg. nth-child(5)

			In tables, to select odd and even rows differently, you don't have to find an expression.
			Instead you can use odd and even as value.
			Eg. nth-child(odd), nth-child(even)

			You can chain this selector to derive a complex exxpression.
			Eg. li:nth-child(3n + 1):nth-child(even)
			This behaves like logical AND operator.
			The first selects all elements in the position 1, 4, 7, 10, 13
			while the second selects 2, 4, 6, 8, 10.
			Only the intersection of the both will be selected which will be 4 and 10.

	ii) first-of-type, last-of-type and nth-of-type():
		:nth-of-type()
			This selector selects same like nth-child, but it does so not based on child position
			but based on type of element and position.
			Eg. div:nth-of-type(2n)
			The above selector selects div element alone in the position 2, 4, 6, 8, 10.
			Position is counted based on the element type and not based on all elements.

Chapter 5 - Eye Candy:
1. Border Radius:
	This applies a curve to the border of specified radius.
	Eg. border-radius: 10px;
	The above value will apply to all four corners of the element.

	To specify different value for each corner, use the below one.
	border-radius: 5px 10px 15px 2px;
	The order is top-left, top-right, bottom-right and then bottom-left.

	To specify each value separately,
		border-top-left-radius: 5px;
		border-top-right-radius: 10px;
		border-bottom-right-radius: 15px;
		border-bottom-left-radius: 2px;
	
	You can also apply different value for x and y zxis to make it elliptical.
		border-top-left-radius: 5px 20px;
		border-top-right-radius: 20px 5px;
		border-bottom-right-radius: 50px 10px;
		border-bottom-left-radius: 5px 30px;

2. Drop Shadows:
	Created using box-shadow property.
	Accepts four measurements and color value.
	First two denotes x and y offset values.

	If only first two are specified, then the shadow will take default colour and style,
	which will look darker in nature.
	Eg. box-shadow: 10px -10px;
	Both values accept negative values.

	Third measurement is the blur effect.
	You cannot use negative blur value.
	Eg. box-shadoe: 10px -10px 5px;

	Fourth measurement is the spread radius of blur.
	It will cause the shadow to spread more.
	Eg. box-shadow: 10px -10px 5px 10px;

	Final thing is the colour of the shadow.
	Eg. box-shadow: 10px -10px 5px 10px #112345;

	To drop shadows inside the container itself,
	use inset.
	Eg. box-shadow: inset 10px -10px 5px 10px;

	Text Shadow:
	Similar to box-shadow, text-shadow can be used to drop shadow of texts.
	This shadow follows text's structure.
	Format of text-shadow:
	text-shadow: <color> <offsetX> <offsetY> <blurRadius>

3. Gradient:
	There are three types of gradient.
	Linear, Radial and Repeated.

	Linear Gradient:
		background-image: linear-gradient(red, yellow);

		Direction:
		background-image: linear-gradient(to left, red, yellow);
		background-image: linear-gradient(to top right, red, yellow);
		background-image: linear-gradient(to bttom left, red, yellow);
		background-image: linear-gradient(30deg, red, yellow);

		Multi-color:
		background-image: linear-gradient(red, orange, yellow, green, blue, indigo, violet);
			The above will evenly distribute all colours within the height of the element.
		
		To set start and end range of the colour, use the following.
		background-image: linear-gradient(black 0%, green 20%, black 40%, red 100%);
	
	Radial Gradient:
		Radial gradient starts at the middle of the element and gradually spreads around in a circular manner.
		background-image: radial-gradient(red, yellow);

		Direction:
		background-image: radial-gradient(at top right, red, yellow);
		Notice the difference "at" instead of "to".

		Offset:
		background-image: radial-gradient(at 75% 60%, red, yellow);

		Shape:
		background-image: radial-gradient(circle at 75% 60%, red, yellow);
	
	Repeating Gradient:
		This gradient must have stop value (i.e. Ranges),
		otherwise it will look exactly like linear gradient.
		background-image: repeating-linear-gradient(red 0%, red 10%, yellow 10%, yellow 20%);

		The above says start red from 0% to 10% and yellow from 10% to 20%
		and repeat the same for the remaining portion.

8. Generated Content and Calculations:
	Using generated content module, we can read the value of an parent attribute and use it further down the chain.
	Also we can initialise and use counters, auto-generate sequential numbers.

	Counters:
		Initialised using "counter-reset" rule and incremented using "counter-increment" rule.
		To get value of counter, "counter()" function can be used.

		First step is to initialise the counter for each list.
		For eg., when we encounter dl element, we can initialise the counter to 0 using below rule.
		dl {
			counter-reset: dtcount 0;
		}
			In the above, dl is the type of element, counter-reset is the CSS property,
			dtcount is the variable and 0 is the initial value.
		
		To increase the counter and add it to the element,
		dt:before {
			content: counter(dtcount)". ";
			counter-increment: dtcount;
		}
			In the above, dt is the type of element, before is the pseudo selector to display content,
			content property allows to display content for that pseudo element, counter() is the CSS function to get value,
			dtcount is the variable which contains counter value, ". " is the extra string appended along with counter value,
			counter-increment is the CSS property to increment the counter and dtcount again is the variable
			to which counter value must be incremented.
		
		To increment or decrement by a factor,
			counter-increment: dtcount 4;
			counter-increment: dtcount -4;
	
	Calc:
		width: calc(100% - 40px);
		This will give the width after doing math.
	
	Element Attributes:
	HTML5 supports data attributes to store data in the element.
	Like data-* where * means any text.
	Eg.
		<h1 data-someholder="somevalue"></h1>
		<div data-fontSize="15px"></div>
	These attributes can be use in CSS with attr() function.

	Eg.
		h1:before {
			color: attr(data-fontColor);
		}
			The above will get value from the attribute of the element and assign it to the color CSS property.
			Currently, only pseudo selectors before and after have the permission to use it content generation.
			color, size or any other property value setting will not work.
	
